<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>System Design Interview – An insider&#39;s guide, Second Edition: Step by Step Guide, Tips and 15 System Design Interview Questions with Detailed Solutions</title><meta name="author" content="Alex Xu"/><style type="text/css"> * {margin:0; padding:0; text-indent:0; }
 h1 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 16.5pt; }
 .p, p { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; margin:0pt; }
 h2 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 13.5pt; }
 .s1 { color: black; font-family:"Times New Roman", serif; font-style: italic; font-weight: normal; text-decoration: none; font-size: 12pt; }
 h3 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: bold; text-decoration: none; font-size: 12pt; }
 .s2 { color: #1154CC; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt; }
 .s3 { color: #1154CC; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 a { color: #00F; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt; }
 .s4 { color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 .s5 { color: #00F; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l1 {padding-left: 0pt;counter-reset: c1 1; }
 #l1> li>*:first-child:before {counter-increment: c1; content: counter(c1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l1> li:first-child>*:first-child:before {counter-increment: c1 0;  }
 #l2 {padding-left: 0pt; }
 #l2> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l3 {padding-left: 0pt;counter-reset: d1 1; }
 #l3> li>*:first-child:before {counter-increment: d1; content: counter(d1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l3> li:first-child>*:first-child:before {counter-increment: d1 0;  }
 #l4 {padding-left: 0pt; }
 #l4> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l5 {padding-left: 0pt; }
 #l5> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l6 {padding-left: 0pt; }
 #l6> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l7 {padding-left: 0pt;counter-reset: e1 1; }
 #l7> li>*:first-child:before {counter-increment: e1; content: counter(e1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l7> li:first-child>*:first-child:before {counter-increment: e1 0;  }
 li {display: block; }
 #l8 {padding-left: 0pt; }
 #l8> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l9 {padding-left: 0pt;counter-reset: g1 1; }
 #l9> li>*:first-child:before {counter-increment: g1; content: counter(g1, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l9> li:first-child>*:first-child:before {counter-increment: g1 0;  }
 #l10 {padding-left: 0pt; }
 #l10> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l11 {padding-left: 0pt; }
 #l11> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l12 {padding-left: 0pt;counter-reset: i1 1; }
 #l12> li>*:first-child:before {counter-increment: i1; content: "["counter(i1, decimal)"] "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l12> li:first-child>*:first-child:before {counter-increment: i1 0;  }
 li {display: block; }
 #l13 {padding-left: 0pt; }
 #l13> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l14 {padding-left: 0pt; }
 #l14> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 li {display: block; }
 #l15 {padding-left: 0pt;counter-reset: k1 1; }
 #l15> li>*:first-child:before {counter-increment: k1; content: "["counter(k1, decimal)"] "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l15> li:first-child>*:first-child:before {counter-increment: k1 0;  }
 #l16 {padding-left: 0pt; }
 #l16> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l17 {padding-left: 0pt;counter-reset: k2 1; }
 #l17> li>*:first-child:before {counter-increment: k2; content: counter(k2, decimal)". "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
 #l17> li:first-child>*:first-child:before {counter-increment: k2 0;  }
 #l18 {padding-left: 0pt; }
 #l18> li>*:first-child:before {content: "• "; color: black; font-family:"Times New Roman", serif; font-style: normal; font-weight: normal; text-decoration: none; font-size: 12pt; }
</style></head><body><h1 style="padding-top: 3pt;padding-left: 203pt;text-indent: -179pt;text-align: left;"><a name="bookmark0">CHAPTER 1: SCALE FROM ZERO TO MILLIONS OF USERS</a></h1><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Designing a system that supports millions of users is challenging, and it is a journey that requires continuous refinement and endless improvement. In this chapter, we build a system that supports a single user and gradually scale it up to serve millions of users. After reading this chapter, you will master a handful of techniques that will help you to crack the system design interview questions.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Single server setup</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">A journey of a thousand miles begins with a single step, and building a complex system is no different. To start with something simple, everything is running on a single server. Figure 1-1 shows the illustration of a single server setup where everything is running on one server: web app, database, cache, etc.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="599" height="377" alt="image" src="Alex%20Xu%201-3_files/Image_001.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">To understand this setup, it is helpful to investigate the request flow and traffic source. Let us first look at the request flow (Figure 1-2).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="587" height="365" alt="image" src="Alex%20Xu%201-3_files/Image_002.jpg"/></span></p><ol id="l1"><li data-list-text="1."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Users access websites through domain names, such as api.mysite.com. Usually, the Domain Name System (DNS) is a paid service provided by 3rd parties and not hosted by our servers.</p></li><li data-list-text="2."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Internet Protocol (IP) address is returned to the browser or mobile app. In the example, IP address 15.125.23.214 is returned.</p></li><li data-list-text="3."><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Once the IP address is obtained, Hypertext Transfer Protocol (HTTP) [1] requests are sent directly to your web server.</p></li><li data-list-text="4."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">The web server returns HTML pages or JSON response for rendering.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Next, let us examine the traffic source. The traffic to your web server comes from two sources: web application and mobile application.</p><ul id="l2"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Web application: it uses a combination of server-side languages (Java, Python, etc.) to handle business logic, storage, etc., and client-side languages (HTML and JavaScript) for presentation.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Mobile application: HTTP protocol is the communication protocol between the mobile app and the web server. JavaScript Object Notation (JSON) is commonly used API response format to transfer data due to its simplicity. An example of the API response in JSON format is shown below:</p><p class="s1" style="padding-top: 5pt;padding-bottom: 2pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">GET /users/12 – Retrieve user object for id = 12</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="278" height="405" alt="image" src="Alex%20Xu%201-3_files/Image_003.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Database</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">With the growth of the user base, one server is not enough, and we need multiple servers: one for web/mobile traffic, the other for the database (Figure 1-3). Separating web/mobile traffic (web tier) and database (data tier) servers allows them to be scaled independently.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="579" height="368" alt="image" src="Alex%20Xu%201-3_files/Image_004.jpg"/></span></p><h2 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Which databases to use?</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">You can choose between a traditional relational database and a non-relational database. Let us examine their differences.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Relational databases are also called a relational database management system (RDBMS) or SQL database. The most popular ones are MySQL, Oracle database, PostgreSQL, etc.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Relational databases represent and store data in tables and rows. You can perform join operations using SQL across different database tables.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Non-Relational databases are also called NoSQL databases. Popular ones are CouchDB, Neo4j, Cassandra, HBase, Amazon DynamoDB, etc. [2]. These databases are grouped into four categories: key-value stores, graph stores, column stores, and document stores. Join operations are generally not supported in non-relational databases.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">For most developers, relational databases are the best option because they have been around for over 40 years and historically, they have worked well. However, if relational databases are not suitable for your specific use cases, it is critical to explore beyond relational databases. Non-relational databases might be the right choice if:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Your application requires super-low latency.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Your data are unstructured, or you do not have any relational data.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">You only need to serialize and deserialize data (JSON, XML, YAML, etc.).</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">You need to store a massive amount of data.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Vertical scaling vs horizontal scaling</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Vertical scaling, referred to as “scale up”, means the process of adding more power (CPU, RAM, etc.) to your servers. Horizontal scaling, referred to as “scale-out”, allows you to scale by adding more servers into your pool of resources.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">When traffic is low, vertical scaling is a great option, and the simplicity of vertical scaling is its main advantage. Unfortunately, it comes with serious limitations.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Vertical scaling has a hard limit. It is impossible to add unlimited CPU and memory to a single server.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Vertical scaling does not have failover and redundancy. If one server goes down, the website/app goes down with it completely.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Horizontal scaling is more desirable for large scale applications due to the limitations of vertical scaling.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the previous design, users are connected to the web server directly. Users will unable to access the website if the web server is offline. In another scenario, if many users access the web server simultaneously and it reaches the web server’s load limit, users generally experience slower response or fail to connect to the server. A load balancer is the best technique to address these problems.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Load balancer</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A load balancer evenly distributes incoming traffic among web servers that are defined in a load-balanced set. Figure 1-4 shows how a load balancer works.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="590" height="527" alt="image" src="Alex%20Xu%201-3_files/Image_005.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">As shown in Figure 1-4, users connect to the public IP of the load balancer directly. With this setup, web servers are unreachable directly by clients anymore. For better security, private IPs are used for communication between servers. A private IP is an IP address reachable only between servers in the same network; however, it is unreachable over the internet. The load balancer communicates with web servers through private IPs.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In Figure 1-4, after a load balancer and a second web server are added, we successfully solved no failover issue and improved the availability of the web tier. Details are explained below:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">If server 1 goes offline, all the traffic will be routed to server 2. This prevents the website from going offline. We will also add a new healthy web server to the server pool to balance the load.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">If the website traffic grows rapidly, and two servers are not enough to handle the traffic, the load balancer can handle this problem gracefully. You only need to add more servers to the web server pool, and the load balancer automatically starts to send requests to them.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Now the web tier looks good, what about the data tier? The current design has one database,</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">so it does not support failover and redundancy. Database replication is a common technique to address those problems. Let us take a look.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Database replication</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Quoted from Wikipedia: “Database replication can be used in many database management systems, usually with a master/slave relationship between the original (master) and the copies (slaves)” [3].</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A master database generally only supports write operations. A slave database gets copies of the data from the master database and only supports read operations. All the data-modifying commands like insert, delete, or update must be sent to the master database. Most applications require a much higher ratio of reads to writes; thus, the number of slave databases in a system is usually larger than the number of master databases. Figure 1-5 shows a master database with multiple slave databases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 48pt;text-indent: 0pt;text-align: left;"><span><img width="490" height="534" alt="image" src="Alex%20Xu%201-3_files/Image_006.jpg"/></span></p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Advantages of database replication:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">Better performance: In the master-slave model, all writes and updates happen in master nodes; whereas, read operations are distributed across slave nodes. This model improves performance because it allows more queries to be processed in parallel.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Reliability: If one of your database servers is destroyed by a natural disaster, such as a typhoon or an earthquake, data is still preserved. You do not need to worry about data loss because data is replicated across multiple locations.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">High availability: By replicating data across different locations, your website remains in</p><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;line-height: 106%;text-align: left;">operation even if a database is offline as you can access data stored in another database server.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the previous section, we discussed how a load balancer helped to improve system availability. We ask the same question here: what if one of the databases goes offline? The architectural design discussed in Figure 1-5 can handle this case:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">If only one slave database is available and it goes offline, read operations will be directed to the master database temporarily. As soon as the issue is found, a new slave database will replace the old one. In case multiple slave databases are available, read operations are redirected to other healthy slave databases. A new database server will replace the old one.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">If the master database goes offline, a slave database will be promoted to be the new master. All the database operations will be temporarily executed on the new master database. A new slave database will replace the old one for data replication immediately. In production systems, promoting a new master is more complicated as the data in a slave database might not be up to date. The missing data needs to be updated by running data recovery scripts. Although some other replication methods like multi-masters and circular replication could help, those setups are more complicated; and their discussions are beyond the scope of this book. Interested readers should refer to the listed reference materials [4] [5].</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-6 shows the system design after adding the load balancer and database replication.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="603" height="661" alt="image" src="Alex%20Xu%201-3_files/Image_007.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let us take a look at the design:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">A user gets the IP address of the load balancer from DNS.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">A user connects the load balancer with this IP address.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">The HTTP request is routed to either Server 1 or Server 2.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">A web server reads user data from a slave database.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">A web server routes any data-modifying operations to the master database. This includes write, update, and delete operations.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Now, you have a solid understanding of the web and data tiers, it is time to improve the load/response time. This can be done by adding a cache layer and shifting static content (JavaScript/CSS/image/video files) to the content delivery network (CDN).</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Cache</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A cache is a temporary storage area that stores the result of expensive responses or frequently accessed data in memory so that subsequent requests are served more quickly. As illustrated in Figure 1-6, every time a new web page loads, one or more database calls are executed to fetch data. The application performance is greatly affected by calling the database repeatedly. The cache can mitigate this problem.</p><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Cache tier</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The cache tier is a temporary data store layer, much faster than the database. The benefits of having a separate cache tier include better system performance, ability to reduce database workloads, and the ability to scale the cache tier independently. Figure 1-7 shows a possible setup of a cache server:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 10pt;text-indent: 0pt;text-align: left;"><span><img width="593" height="100" alt="image" src="Alex%20Xu%201-3_files/Image_008.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">After receiving a request, a web server first checks if the cache has the available response. If it has, it sends data back to the client. If not, it queries the database, stores the response in cache, and sends it back to the client. This caching strategy is called a read-through cache.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Other caching strategies are available depending on the data type, size, and access patterns. A previous study explains how different caching strategies work [6].</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Interacting with cache servers is simple because most cache servers provide APIs for common programming languages. The following code snippet shows typical Memcached APIs:</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="384" height="94" alt="image" src="Alex%20Xu%201-3_files/Image_009.jpg"/></span></p><h2 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Considerations for using cache</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Here are a few considerations for using a cache system:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Decide when to use cache. Consider using cache when data is read frequently but modified infrequently. Since cached data is stored in volatile memory, a cache server is not ideal for persisting data. For instance, if a cache server restarts, all the data in memory is lost. Thus, important data should be saved in persistent data stores.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Expiration policy. It is a good practice to implement an expiration policy. Once cached data is expired, it is removed from the cache. When there is no expiration policy, cached data will be stored in the memory permanently. It is advisable not to make the expiration date too short as this will cause the system to reload data from the database too frequently. Meanwhile, it is advisable not to make the expiration date too long as the data can become stale.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Consistency: This involves keeping the data store and the cache in sync. Inconsistency can happen because data-modifying operations on the data store and cache are not in a single transaction. When scaling across multiple regions, maintaining consistency between</p><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;line-height: 106%;text-align: left;">the data store and cache is challenging. For further details, refer to the paper titled “Scaling Memcache at Facebook” published by Facebook [7].</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Mitigating failures: A single cache server represents a potential single point of failure (SPOF), defined in Wikipedia as follows: “A single point of failure (SPOF) is a part of a system that, if it fails, will stop the entire system from working” [8]. As a result, multiple cache servers across different data centers are recommended to avoid SPOF. Another recommended approach is to overprovision the required memory by certain percentages. This provides a buffer as the memory usage increases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 90pt;text-indent: 0pt;text-align: left;"><span><img width="362" height="334" alt="image" src="Alex%20Xu%201-3_files/Image_010.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p></li><li data-list-text="•"><p style="padding-left: 18pt;text-indent: 0pt;text-align: left;">Eviction Policy: Once the cache is full, any requests to add items to the cache might cause existing items to be removed. This is called cache eviction. Least-recently-used (LRU) is the most popular cache eviction policy. Other eviction policies, such as the Least Frequently Used (LFU) or First in First Out (FIFO), can be adopted to satisfy different use cases.</p></li></ul></li></ol><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Content delivery network (CDN)</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A CDN is a network of geographically dispersed servers used to deliver static content. CDN servers cache static content like images, videos, CSS, JavaScript files, etc.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Dynamic content caching is a relatively new concept and beyond the scope of this book. It enables the caching of HTML pages that are based on request path, query strings, cookies, and request headers. Refer to the article mentioned in reference material [9] for more about this. This book focuses on how to use CDN to cache static content.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Here is how CDN works at the high-level: when a user visits a website, a CDN server closest to the user will deliver static content. Intuitively, the further users are from CDN servers, the slower the website loads. For example, if CDN servers are in San Francisco, users in Los Angeles will get content faster than users in Europe. Figure 1-9 is a great example that shows how CDN improves load time.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="466" height="212" alt="image" src="Alex%20Xu%201-3_files/Image_011.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-10 demonstrates the CDN workflow.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="579" height="213" alt="image" src="Alex%20Xu%201-3_files/Image_012.jpg"/></span></p><ol id="l3"><li data-list-text="1."><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">User A tries to get image.png by using an image URL. The URL’s domain is provided by the CDN provider. The following two image URLs are samples used to demonstrate what image URLs look like on Amazon and Akamai CDNs:</p><ul id="l4"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -7pt;text-align: left;">https://mysite.cloudfront.net/logo.jpg</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -7pt;text-align: left;">https://mysite.akamai.com/image-manager/img/logo.jpg</p></li></ul></li><li data-list-text="2."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">If the CDN server does not have image.png in the cache, the CDN server requests the file from the origin, which can be a web server or online storage like Amazon S3.</p></li><li data-list-text="3."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">The origin returns image.png to the CDN server, which includes optional HTTP header Time-to-Live (TTL) which describes how long the image is cached.</p></li><li data-list-text="4."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">The CDN caches the image and returns it to User A. The image remains cached in the CDN until the TTL expires.</p></li><li data-list-text="5."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">User B sends a request to get the same image.</p></li><li data-list-text="6."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">The image is returned from the cache as long as the TTL has not expired.</p><h2 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Considerations of using a CDN</h2><ul id="l5"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Cost: CDNs are run by third-party providers, and you are charged for data transfers in and out of the CDN. Caching infrequently used assets provides no significant benefits so you should consider moving them out of the CDN.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Setting an appropriate cache expiry: For time-sensitive content, setting a cache expiry time is important. The cache expiry time should neither be too long nor too short. If it is too long, the content might no longer be fresh. If it is too short, it can cause repeat reloading of content from origin servers to the CDN.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">CDN fallback: You should consider how your website/application copes with CDN failure. If there is a temporary CDN outage, clients should be able to detect the problem and request resources from the origin.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Invalidating files: You can remove a file from the CDN before it expires by performing one of the following operations:</p><ul id="l6"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 47pt;text-indent: -7pt;text-align: left;">Invalidate the CDN object using APIs provided by CDN vendors.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">Use object versioning to serve a different version of the object. To version an object, you can add a parameter to the URL, such as a version number. For example, version number 2 is added to the query string: image.png?v=2.</p></li></ul></li></ul></li></ol><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-11 shows the design after the CDN and cache are added.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="602" height="647" alt="image" src="Alex%20Xu%201-3_files/Image_013.jpg"/></span></p><ol id="l7"><li data-list-text="1."><p style="padding-top: 6pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Static assets (JS, CSS, images, etc.,) are no longer served by web servers. They are fetched from the CDN for better performance.</p></li><li data-list-text="2."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">The database load is lightened by caching data.</p></li></ol><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Stateless web tier</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Now it is time to consider scaling the web tier horizontally. For this, we need to move state (for instance user session data) out of the web tier. A good practice is to store session data in the persistent storage such as relational database or NoSQL. Each web server in the cluster can access state data from databases. This is called stateless web tier.</p><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Stateful architecture</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A stateful server and stateless server has some key differences. A stateful server remembers client data (state) from one request to the next. A stateless server keeps no state information.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-12 shows an example of a stateful architecture.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><span><img width="589" height="376" alt="image" src="Alex%20Xu%201-3_files/Image_014.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In Figure 1-12, user A’s session data and profile image are stored in Server 1. To authenticate User A, HTTP requests must be routed to Server 1. If a request is sent to other servers like Server 2, authentication would fail because Server 2 does not contain User A’s session data. Similarly, all HTTP requests from User B must be routed to Server 2; all requests from User C must be sent to Server 3.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The issue is that every request from the same client must be routed to the same server. This can be done with sticky sessions in most load balancers [10]; however, this adds the overhead. Adding or removing servers is much more difficult with this approach. It is also challenging to handle server failures.</p><h2 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Stateless architecture</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-13 shows the stateless architecture.</p><p style="padding-left: 20pt;text-indent: 0pt;text-align: left;"><span><img width="581" height="568" alt="image" src="Alex%20Xu%201-3_files/Image_015.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this stateless architecture, HTTP requests from users can be sent to any web servers, which fetch state data from a shared data store. State data is stored in a shared data store and kept out of web servers. A stateless system is simpler, more robust, and scalable.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-14 shows the updated design with a stateless web tier.</p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="576" height="574" alt="image" src="Alex%20Xu%201-3_files/Image_016.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In Figure 1-14, we move the session data out of the web tier and store them in the persistent data store. The shared data store could be a relational database, Memcached/Redis, NoSQL, etc. The NoSQL data store is chosen as it is easy to scale. Autoscaling means adding or removing web servers automatically based on the traffic load. After the state data is removed out of web servers, auto-scaling of the web tier is easily achieved by adding or removing servers based on traffic load.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Your website grows rapidly and attracts a significant number of users internationally. To improve availability and provide a better user experience across wider geographical areas, supporting multiple data centers is crucial.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Data centers</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Figure 1-15 shows an example setup with two data centers. In normal operation, users are geoDNS-routed, also known as geo-routed, to the closest data center, with a split traffic of <i>x% </i>in US-East and <i>(100 – x)% </i>in US-West. geoDNS is a DNS service that allows domain names to be resolved to IP addresses based on the location of a user.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="593" height="590" alt="image" src="Alex%20Xu%201-3_files/Image_017.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In the event of any significant data center outage, we direct all traffic to a healthy data center. In Figure 1-16, data center 2 (US-West) is offline, and 100% of the traffic is routed to data center 1 (US-East).</p><p style="padding-left: 9pt;text-indent: 0pt;text-align: left;"><span><img width="596" height="609" alt="image" src="Alex%20Xu%201-3_files/Image_018.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Several technical challenges must be resolved to achieve multi-data center setup:</p><ul id="l8"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Traffic redirection: Effective tools are needed to direct traffic to the correct data center. GeoDNS can be used to direct traffic to the nearest data center depending on where a user is located.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Data synchronization: Users from different regions could use different local databases or caches. In failover cases, traffic might be routed to a data center where data is unavailable. A common strategy is to replicate data across multiple data centers. A previous study shows how Netflix implements asynchronous multi-data center replication [11].</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Test and deployment: With multi-data center setup, it is important to test your website/application at different locations. Automated deployment tools are vital to keep services consistent through all the data centers [11].</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">To further scale our system, we need to decouple different components of the system so they can be scaled independently. Messaging queue is a key strategy employed by many real- world distributed systems to solve this problem.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Message queue</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A message queue is a durable component, stored in memory, that supports asynchronous communication. It serves as a buffer and distributes asynchronous requests. The basic architecture of a message queue is simple. Input services, called producers/publishers, create messages, and publish them to a message queue. Other services or servers, called consumers/subscribers, connect to the queue, and perform actions defined by the messages. The model is shown in Figure 1-17.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="599" height="127" alt="image" src="Alex%20Xu%201-3_files/Image_019.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Decoupling makes the message queue a preferred architecture for building a scalable and reliable application. With the message queue, the producer can post a message to the queue when the consumer is unavailable to process it. The consumer can read messages from the queue even when the producer is unavailable.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Consider the following use case: your application supports photo customization, including cropping, sharpening, blurring, etc. Those customization tasks take time to complete. In Figure 1-18, web servers publish photo processing jobs to the message queue. Photo processing workers pick up jobs from the message queue and asynchronously perform photo customization tasks. The producer and the consumer can be scaled independently. When the size of the queue becomes large, more workers are added to reduce the processing time.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">However, if the queue is empty most of the time, the number of workers can be reduced.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="603" height="149" alt="image" src="Alex%20Xu%201-3_files/Image_020.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Logging, metrics, automation</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">When working with a small website that runs on a few servers, logging, metrics, and automation support are good practices but not a necessity. However, now that your site has grown to serve a large business, investing in those tools is essential.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Logging: Monitoring error logs is important because it helps to identify errors and problems in the system. You can monitor error logs at per server level or use tools to aggregate them to a centralized service for easy search and viewing.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Metrics: Collecting different types of metrics help us to gain business insights and understand the health status of the system. Some of the following metrics are useful:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Host level metrics: CPU, Memory, disk I/O, etc.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Aggregated level metrics: for example, the performance of the entire database tier, cache tier, etc.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Key business metrics: daily active users, retention, revenue, etc.</p></li></ul><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Automation: When a system gets big and complex, we need to build or leverage automation tools to improve productivity. Continuous integration is a good practice, in which each code check-in is verified through automation, allowing teams to detect problems early. Besides, automating your build, test, deploy process, etc. could improve developer productivity significantly.</p><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Adding message queues and different tools</h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-19 shows the updated design. Due to the space constraint, only one data center is shown in the figure.</p><ol id="l9"><li data-list-text="1."><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">The design includes a message queue, which helps to make the system more loosely coupled and failure resilient.</p></li><li data-list-text="2."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">Logging, monitoring, metrics, and automation tools are included.</p><p style="padding-left: 30pt;text-indent: 0pt;text-align: left;"><span><img width="529" height="701" alt="image" src="Alex%20Xu%201-3_files/Image_021.jpg"/></span></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">As the data grows every day, your database gets more overloaded. It is time to scale the data tier.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Database scaling</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">There are two broad approaches for database scaling: vertical scaling and horizontal scaling.</p><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Vertical scaling</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Vertical scaling, also known as scaling up, is the scaling by adding more power (CPU, RAM, DISK, etc.) to an existing machine. There are some powerful database servers. According to Amazon Relational Database Service (RDS) [12], you can get a database server with 24 TB of RAM. This kind of powerful database server could store and handle lots of data. For example, stackoverflow.com in 2013 had over 10 million monthly unique visitors, but it only had 1 master database [13]. However, vertical scaling comes with some serious drawbacks:</p><ul id="l10"><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">You can add more CPU, RAM, etc. to your database server, but there are hardware limits. If you have a large user base, a single server is not enough.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Greater risk of single point of failures.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">The overall cost of vertical scaling is high. Powerful servers are much more expensive.</p></li></ul></li></ol><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Horizontal scaling</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Horizontal scaling, also known as sharding, is the practice of adding more servers. Figure 1- 20 compares vertical scaling with horizontal scaling.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="599" height="436" alt="image" src="Alex%20Xu%201-3_files/Image_022.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Sharding separates large databases into smaller, more easily managed parts called shards. Each shard shares the same schema, though the actual data on each shard is unique to the shard.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-21 shows an example of sharded databases. User data is allocated to a database server based on user IDs. Anytime you access data, a hash function is used to find the corresponding shard. In our example, <i>user_id % 4 </i>is used as the hash function. If the result</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">equals to 0, shard 0 is used to store and fetch data. If the result equals to 1, shard 1 is used. The same logic applies to other shards.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 102pt;text-indent: 0pt;text-align: left;"><span><img width="350" height="267" alt="image" src="Alex%20Xu%201-3_files/Image_023.jpg"/></span></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 1-22 shows the user table in sharded databases.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 95pt;text-indent: 0pt;text-align: left;"><span><img width="363" height="473" alt="image" src="Alex%20Xu%201-3_files/Image_024.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The most important factor to consider when implementing a sharding strategy is the choice of the sharding key. Sharding key (known as a partition key) consists of one or more columns that determine how data is distributed. As shown in Figure 1-22, <i>“user_id” </i>is the sharding key. A sharding key allows you to retrieve and modify data efficiently by routing database queries to the correct database. When choosing a sharding key, one of the most important</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">criteria is to choose a key that can evenly distributed data.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Sharding is a great technique to scale the database but it is far from a perfect solution. It introduces complexities and new challenges to the system:</p><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Resharding data<span class="p">: Resharding data is needed when 1) a single shard could no longer hold more data due to rapid growth. 2) Certain shards might experience shard exhaustion faster than others due to uneven data distribution. When shard exhaustion happens, it requires updating the sharding function and moving data around. Consistent hashing, which will be discussed in Chapter 5, is a commonly used technique to solve this problem.</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Celebrity problem<span class="p">: This is also called a hotspot key problem. Excessive access to a specific shard could cause server overload. Imagine data for Katy Perry, Justin Bieber, and Lady Gaga all end up on the same shard. For social applications, that shard will be overwhelmed with read operations. To solve this problem, we may need to allocate a shard for each celebrity. Each shard might even require further partition.</span></h3><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Join and de-normalization<span class="p">: Once a database has been sharded across multiple servers, it is hard to perform join operations across database shards. A common workaround is to de- normalize the database so that queries can be performed in a single table.</span></h3><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In Figure 1-23, we shard databases to support rapidly increasing data traffic. At the same time, some of the non-relational functionalities are moved to a NoSQL data store to reduce the database load. Here is an article that covers many use cases of NoSQL [14].</p><p style="padding-left: 14pt;text-indent: 0pt;text-align: left;"><span><img width="578" height="751" alt="image" src="Alex%20Xu%201-3_files/Image_025.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Millions of users and beyond</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Scaling a system is an iterative process. Iterating on what we have learned in this chapter could get us far. More fine-tuning and new strategies are needed to scale beyond millions of users. For example, you might need to optimize your system and decouple the system to even smaller services. All the techniques learned in this chapter should provide a good foundation to tackle new challenges. To conclude this chapter, we provide a summary of how we scale our system to support millions of users:</p><ul id="l11"><li data-list-text="•"><p style="padding-top: 5pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Keep web tier stateless</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Build redundancy at every tier</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Cache data as much as you can</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Support multiple data centers</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Host static assets in CDN</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Scale your data tier by sharding</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Split tiers into individual services</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Monitor your system and use automation tools</p></li></ul><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Congratulations on getting this far! Now give yourself a pat on the back. Good job!</p><h1 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reference materials</h1><ol id="l12"><li data-list-text="[1]"><p style="padding-top: 5pt;padding-left: 21pt;text-indent: -17pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" class="s4" target="_blank">Hypertext Transfer Protocol: </a><a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" class="s2" target="_blank">https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol</a></p></li><li data-list-text="[2]"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://blog.teamtreehouse.com/should-you-go-beyond-relational-databases" class="s4" target="_blank">Should you go Beyond Relational Databases?: </a><a href="https://blog.teamtreehouse.com/should-you-go-beyond-relational-databases" class="s2" target="_blank">https://blog.teamtreehouse.com/should-you-go-beyond-relational-databases</a></p></li><li data-list-text="[3]"><p style="padding-left: 21pt;text-indent: -17pt;line-height: 13pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Replication_(computing)" class="s4" target="_blank">Replication: </a><a href="https://en.wikipedia.org/wiki/Replication_(computing)" class="s2" target="_blank">https://en.wikipedia.org/wiki/Replication_(computing)</a></p></li><li data-list-text="[4]"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://en.wikipedia.org/wiki/Multi-master_replication" class="s4" target="_blank">Multi-master replication: </a><a href="https://en.wikipedia.org/wiki/Multi-master_replication" class="s2" target="_blank">https://en.wikipedia.org/wiki/Multi-master_replication</a></p></li><li data-list-text="[5]"><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-replication-multi-master.html" class="s4" target="_blank">NDB Cluster Replication: Multi-Master and Circular Replication: </a><a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-replication-multi-master.html" class="s2" target="_blank">https://dev.mysql.com/doc/refman/5.7/en/mysql-cluster-replication-multi-master.html</a></p></li><li data-list-text="[6]"><p style="padding-top: 2pt;padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://codeahoy.com/2017/08/11/caching-strategies-and-how-to-choose-the-right-one/" class="s4" target="_blank">Caching Strategies and How to Choose the Right One: </a><a href="https://codeahoy.com/2017/08/11/caching-strategies-and-how-to-choose-the-right-one/" class="s2" target="_blank">https://codeahoy.com/2017/08/11/caching-strategies-and-how-to-choose-the-right-one/</a></p></li><li data-list-text="[7]"><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">R. Nishtala, &quot;Facebook, Scaling Memcache at,&quot; 10th USENIX Symposium on Networked Systems Design and Implementation (NSDI ’13).</p></li><li data-list-text="[8]"><p style="padding-top: 3pt;padding-left: 21pt;text-indent: -17pt;text-align: left;"><a href="https://en.wikipedia.org/wiki/Single_point_of_failure" class="s4" target="_blank">Single point of failure: </a><a href="https://en.wikipedia.org/wiki/Single_point_of_failure" class="s2" target="_blank">https://en.wikipedia.org/wiki/Single_point_of_failure</a></p></li><li data-list-text="[9]"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://aws.amazon.com/cloudfront/dynamic-content/" class="s4" target="_blank">Amazon CloudFront Dynamic Content Delivery: </a><a href="https://aws.amazon.com/cloudfront/dynamic-content/" class="s2" target="_blank">https://aws.amazon.com/cloudfront/dynamic-content/</a></p></li><li data-list-text="[10]"><p style="padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html" class="s4" target="_blank">Configure Sticky Sessions for Your Classic Load Balancer: </a><a href="https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html" class="s2" target="_blank">https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-sticky-sessions.html</a></p></li><li data-list-text="[11]"><p style="padding-left: 27pt;text-indent: -23pt;text-align: left;">Active-Active for Multi-Regional Resiliency:</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://netflixtechblog.com/active-active-for-multi-regional-resiliency-c47719f6685b" class="s2">https://netflixtechblog.com/active-active-for-multi-regional-resiliency-c47719f6685b</a></p></li><li data-list-text="[12]"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://aws.amazon.com/ec2/instance-types/high-memory/" class="s4" target="_blank">Amazon EC2 High Memory Instances: </a><a href="https://aws.amazon.com/ec2/instance-types/high-memory/" class="s2" target="_blank">https://aws.amazon.com/ec2/instance-types/high-memory/</a></p></li><li data-list-text="[13]"><p style="padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="http://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow" class="s4" target="_blank">What it takes to run Stack Overflow: </a><a href="http://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow" class="s2" target="_blank">http://nickcraver.com/blog/2013/11/22/what-it-takes-to-run-stack-overflow</a></p></li><li data-list-text="[14]"><p style="padding-left: 27pt;text-indent: -23pt;text-align: left;">What The Heck Are You Actually Using NoSQL For:</p></li></ol><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="http://highscalability.com/blog/2010/12/6/what-the-heck-are-you-actually-using-nosql-for.html" class="s2" target="_blank">http://highscalability.com/blog/2010/12/6/what-the-heck-are-you-actually-using-nosql-</a><a href="http://highscalability.com/blog/2010/12/6/what-the-heck-are-you-actually-using-nosql-for.html" class="s3" target="_blank"> </a><a href="http://highscalability.com/blog/2010/12/6/what-the-heck-are-you-actually-using-nosql-for.html" class="s2" target="_blank">for.html</a></p><h1 style="padding-top: 3pt;padding-left: 13pt;text-indent: 0pt;text-align: left;"><a name="bookmark1">CHAPTER 2: BACK-OF-THE-ENVELOPE ESTIMATION</a></h1><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In a system design interview, sometimes you are asked to estimate system capacity or performance requirements using a back-of-the-envelope estimation. According to Jeff Dean, Google Senior Fellow, “back-of-the-envelope calculations are estimates you create using a combination of thought experiments and common performance numbers to get a good feel for which designs will meet your requirements” [1].</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">You need to have a good sense of scalability basics to effectively carry out back-of-the- envelope estimation. The following concepts should be well understood: power of two [2], latency numbers every programmer should know, and availability numbers.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Power of two</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Although data volume can become enormous when dealing with distributed systems, calculation all boils down to the basics. To obtain correct calculations, it is critical to know the data volume unit using the power of 2. A byte is a sequence of 8 bits. An ASCII character uses one byte of memory (8 bits). Below is a table explaining the data volume unit (Table 2- 1).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 7pt;text-indent: 0pt;text-align: left;"><span><img width="595" height="349" alt="image" src="Alex%20Xu%201-3_files/Image_026.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Latency numbers every programmer should know</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Dr. Dean from Google reveals the length of typical computer operations in 2010 [1]. Some numbers are outdated as computers become faster and more powerful. However, those numbers should still be able to give us an idea of the fastness and slowness of different computer operations.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="608" height="673" alt="image" src="Alex%20Xu%201-3_files/Image_027.jpg"/></span></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Notes</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 1pt;text-align: left;"><span><img width="59" height="1" alt="image" src="Alex%20Xu%201-3_files/Image_028.png"/></span></p><p style="padding-top: 7pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">ns = nanosecond, µs = microsecond, ms = millisecond 1 ns = 10^-9 seconds</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">1 µs= 10^-6 seconds = 1,000 ns</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;">1 ms = 10^-3 seconds = 1,000 µs = 1,000,000 ns</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A Google software engineer built a tool to visualize Dr. Dean’s numbers. The tool also takes the time factor into consideration. Figures 2-1 shows the visualized latency numbers as of 2020 (source of figures: reference material [3]).</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="600" height="576" alt="image" src="Alex%20Xu%201-3_files/Image_029.jpg"/></span></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">By analyzing the numbers in Figure 2-1, we get the following conclusions:</p><ul id="l13"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Memory is fast but the disk is slow.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Avoid disk seeks if possible.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Simple compression algorithms are fast.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Compress data before sending it over the internet if possible.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Data centers are usually in different regions, and it takes time to send data between them.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Availability numbers</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">High availability is the ability of a system to be continuously operational for a desirably long period of time. High availability is measured as a percentage, with 100% means a service that has 0 downtime. Most services fall between 99% and 100%.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A service level agreement (SLA) is a commonly used term for service providers. This is an agreement between you (the service provider) and your customer, and this agreement formally defines the level of uptime your service will deliver. Cloud providers Amazon [4], Google [5] and Microsoft [6] set their SLAs at 99.9% or above. Uptime is traditionally measured in nines. The more the nines, the better. As shown in Table 2-3, the number of nines correlate to the expected system downtime.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="596" height="302" alt="image" src="Alex%20Xu%201-3_files/Image_030.jpg"/></span></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Example: Estimate Twitter QPS and storage requirements</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Please note the following numbers are for this exercise only as they are not real numbers from Twitter.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Assumptions:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">300 million monthly active users.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">50% of users use Twitter daily.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Users post 2 tweets per day on average.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">10% of tweets contain media.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 13pt;line-height: 144%;text-align: left;">Data is stored for 5 years. Estimations:</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;">Query per second (QPS) estimate:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Daily active users (DAU) = 300 million * 50% = 150 million</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Tweets QPS = 150 million * 2 tweets / 24 hour / 3600 seconds = ~3500</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Peek QPS = 2 * QPS = ~7000</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">We will only estimate media storage here.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Average tweet size:</p><ul id="l14"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 50pt;text-indent: -10pt;text-align: left;">tweet_id 64 bytes</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 50pt;text-indent: -10pt;text-align: left;">text   140 bytes</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 50pt;text-indent: -10pt;text-align: left;">media  1 MB</p></li></ul></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">Media storage: 150 million * 2 * 10% * 1 MB = 30 TB per day</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 29pt;text-indent: -10pt;text-align: left;">5-year media storage: 30 TB * 365 * 5 = ~55 PB</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Tips</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Back-of-the-envelope estimation is all about the process. Solving the problem is more important than obtaining results. Interviewers may test your problem-solving skills. Here are a few tips to follow:</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Rounding and Approximation. It is difficult to perform complicated math operations during the interview. For example, what is the result of “99987 / 9.1”? There is no need to spend valuable time to solve complicated math problems. Precision is not expected. Use round numbers and approximation to your advantage. The division question can be simplified as follows: “100,000 / 10”.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Write down your assumptions. It is a good idea to write down your assumptions to be referenced later.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Label your units. When you write down “5”, does it mean 5 KB or 5 MB? You might confuse yourself with this. Write down the units because “5 MB” helps to remove ambiguity.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Commonly asked back-of-the-envelope estimations: QPS, peak QPS, storage, cache, number of servers, etc. You can practice these calculations when preparing for an interview. Practice makes perfect.</p></li></ul><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Congratulations on getting this far! Now give yourself a pat on the back. Good job!</p><h1 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Reference materials</h1><ol id="l15"><li data-list-text="[1]"><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">J. Dean.Google Pro Tip: Use Back-Of-The-Envelope-Calculations To Choose The Best Design:</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html" class="s2" target="_blank">http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-</a><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html" class="s3" target="_blank"> </a><a href="http://highscalability.com/blog/2011/1/26/google-pro-tip-use-back-of-the-envelope-calculations-to-choo.html" class="s2" target="_blank">calculations-to-choo.html</a></p></li><li data-list-text="[2]"><p style="padding-top: 3pt;padding-left: 21pt;text-indent: -17pt;text-align: left;"><a href="https://github.com/donnemartin/system-design-primer" class="s4" target="_blank">System design primer: </a><a href="https://github.com/donnemartin/system-design-primer" target="_blank">https://github.com/donnemartin/system-design-primer</a></p></li><li data-list-text="[3]"><p style="padding-top: 3pt;padding-left: 21pt;text-indent: -17pt;text-align: left;">Latency Numbers Every Programmer Should Know:</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://colin-scott.github.io/personal_website/research/interactive_latency.html" class="s2">https://colin-scott.github.io/personal_website/research/interactive_latency.html</a></p></li><li data-list-text="[4]"><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://aws.amazon.com/compute/sla/" class="s4" target="_blank">Amazon Compute Service Level Agreement: </a><a href="https://aws.amazon.com/compute/sla/" class="s2" target="_blank">https://aws.amazon.com/compute/sla/</a></p></li><li data-list-text="[5]"><p style="padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://cloud.google.com/compute/sla" class="s4" target="_blank">Compute Engine Service Level Agreement (SLA): </a><a href="https://cloud.google.com/compute/sla" class="s2" target="_blank">https://cloud.google.com/compute/sla</a></p></li><li data-list-text="[6]"><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://azure.microsoft.com/en-us/support/legal/sla/summary/" class="s4" target="_blank">SLA summary for Azure services: </a><a href="https://azure.microsoft.com/en-us/support/legal/sla/summary/" class="s2" target="_blank">https://azure.microsoft.com/en-</a><a href="https://azure.microsoft.com/en-us/support/legal/sla/summary/" class="s3" target="_blank"> </a><a href="https://azure.microsoft.com/en-us/support/legal/sla/summary/" class="s2" target="_blank">us/support/legal/sla/summary/</a></p><h1 style="padding-top: 3pt;padding-left: 176pt;text-indent: -154pt;text-align: left;"><a name="bookmark2">CHAPTER 3: A FRAMEWORK FOR SYSTEM DESIGN INTERVIEWS</a></h1><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">You have just landed a coveted on-site interview at your dream company. The hiring coordinator sends you a schedule for that day. Scanning down the list, you feel pretty good about it until your eyes land on this interview session - System Design Interview.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">System design interviews are often intimidating. It could be as vague as “designing a well- known product X?”. The questions are ambiguous and seem unreasonably broad. Your weariness is understandable. After all, how could anyone design a popular product in an hour that has taken hundreds if not thousands of engineers to build?</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The good news is that no one expects you to. Real-world system design is extremely complicated. For example, Google search is deceptively simple; however, the amount of technology that underpins that simplicity is truly astonishing. If no one expects you to design a real-world system in an hour, what is the benefit of a system design interview?</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The system design interview simulates real-life problem solving where two co-workers collaborate on an ambiguous problem and come up with a solution that meets their goals. The problem is open-ended, and there is no perfect answer. The final design is less important compared to the work you put in the design process. This allows you to demonstrate your design skill, defend your design choices, and respond to feedback in a constructive manner.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Let us flip the table and consider what goes through the interviewer’s head as she walks into the conference room to meet you. The primary goal of the interviewer is to accurately assess your abilities. The last thing she wants is to give an inconclusive evaluation because the session has gone poorly and there are not enough signals. What is an interviewer looking for in a system design interview?</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Many think that system design interview is all about a person&#39;s technical design skills. It is much more than that. An effective system design interview gives strong signals about a person&#39;s ability to collaborate, to work under pressure, and to resolve ambiguity constructively. The ability to ask good questions is also an essential skill, and many interviewers specifically look for this skill.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A good interviewer also looks for red flags. Over-engineering is a real disease of many engineers as they delight in design purity and ignore tradeoffs. They are often unaware of the compounding costs of over-engineered systems, and many companies pay a high price for that ignorance. You certainly do not want to demonstrate this tendency in a system design interview. Other red flags include narrow mindedness, stubbornness, etc.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this chapter, we will go over some useful tips and introduce a simple and effective framework to solve system design interview problems.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">A 4-step process for effective system design interview</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Every system design interview is different. A great system design interview is open-ended and there is no one-size-fits-all solution. However, there are steps and common ground to cover in every system design interview.</p><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Step 1 - Understand the problem and establish design scope</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">&quot;Why did the tiger roar?&quot;</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: justify;">A hand shot up in the back of the class. &quot;Yes, Jimmy?&quot;, the teacher responded. &quot;Because he was HUNGRY&quot;.</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">&quot;Very good Jimmy.&quot;</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Throughout his childhood, Jimmy has always been the first to answer questions in the class. Whenever the teacher asks a question, there is always a kid in the classroom who loves to take a crack at the question, no matter if he knows the answer or not. That is Jimmy.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Jimmy is an ace student. He takes pride in knowing all the answers fast. In exams, he is usually the first person to finish the questions. He is a teacher&#39;s top choice for any academic competition.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">DON&#39;T be like Jimmy.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In a system design interview, giving out an answer quickly without thinking gives you no bonus points. Answering without a thorough understanding of the requirements is a huge red flag as the interview is not a trivia contest. There is no right answer.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">So, do not jump right in to give a solution. Slow down. Think deeply and ask questions to clarify requirements and assumptions. This is extremely important.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">As an engineer, we like to solve hard problems and jump into the final design; however, this approach is likely to lead you to design the wrong system. One of the most important skills as an engineer is to ask the right questions, make the proper assumptions, and gather all the information needed to build a system. So, do not be afraid to ask questions.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">When you ask a question, the interviewer either answers your question directly or asks you to make your assumptions. If the latter happens, write down your assumptions on the whiteboard or paper. You might need them later.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">What kind of questions to ask? Ask questions to understand the exact requirements. Here is a list of questions to help you get started:</p><ul id="l16"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">What specific features are we going to build?</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">How many users does the product have?</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">How fast does the company anticipate to scale up? What are the anticipated scales in 3 months, 6 months, and a year?</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">What is the company’s technology stack? What existing services you might leverage to simplify the design?</p><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Example</h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">If you are asked to design a news feed system, you want to ask questions that help you clarify the requirements. The conversation between you and the interviewer might look like this:</p><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: Is this a mobile app? Or a web app? Or both?</span></h3><h3 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: Both.</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: What are the most important features for the product?</span></h3><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: Ability to make a post and see friends’ news feed.</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: Is the news feed sorted in reverse chronological order or a particular order? The particular order means each post is given a different weight. For instance, posts from your close friends are more important than posts from a group.</span></h3><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: To keep things simple, let us assume the feed is sorted by reverse chronological order.</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: How many friends can a user have?</span></h3><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: 5000</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: What is the traffic volume?</span></h3><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: 10 million daily active users (DAU)</span></h3><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Candidate<span class="p">: Can feed contain images, videos, or just text?</span></h3><h3 style="padding-left: 5pt;text-indent: 0pt;text-align: left;">Interviewer<span class="p">: It can contain media files, including both images and videos.</span></h3><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Above are some sample questions that you can ask your interviewer. It is important to understand the requirements and clarify ambiguities</p><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Step 2 - Propose high-level design and get buy-in</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this step, we aim to develop a high-level design and reach an agreement with the interviewer on the design. It is a great idea to collaborate with the interviewer during the process.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Come up with an initial blueprint for the design. Ask for feedback. Treat your interviewer as a teammate and work together. Many good interviewers love to talk and get involved.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Draw box diagrams with key components on the whiteboard or paper. This might include clients (mobile/web), APIs, web servers, data stores, cache, CDN, message queue, etc.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Do back-of-the-envelope calculations to evaluate if your blueprint fits the scale constraints. Think out loud. Communicate with your interviewer if back-of-the-envelope is necessary before diving into it.</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">If possible, go through a few concrete use cases. This will help you frame the high-level design. It is also likely that the use cases would help you discover edge cases you have not yet considered.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Should we include API endpoints and database schema here? This depends on the problem. For large design problems like “Design Google search engine”, this is a bit of too low level. For a problem like designing the backend for a multi-player poker game, this is a fair game. Communicate with your interviewer.</p><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Example</h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">Let us use “Design a news feed system” to demonstrate how to approach the high-level design. Here you are not required to understand how the system actually works. All the details will be explained in Chapter 11.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: justify;">At the high level, the design is divided into two flows: feed publishing and news feed building.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: justify;">Feed publishing: when a user publishes a post, corresponding data is written into cache/database, and the post will be populated into friends’ news feed.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Newsfeed building: the news feed is built by aggregating friends’ posts in a reverse chronological order.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 3-1 and Figure 3-2 present high-level designs for feed publishing and news feed building flows, respectively.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 77pt;text-indent: 0pt;text-align: left;"><span><img width="407" height="676" alt="image" src="Alex%20Xu%201-3_files/Image_031.jpg"/></span></p><p style="padding-left: 92pt;text-indent: 0pt;text-align: left;"><span><img width="371" height="577" alt="image" src="Alex%20Xu%201-3_files/Image_032.jpg"/></span></p><h2 style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Step 3 - Design deep dive</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">At this step, you and your interviewer should have already achieved the following objectives:</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Agreed on the overall goals and feature scope</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Sketched out a high-level blueprint for the overall design</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Obtained feedback from your interviewer on the high-level design</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Had some initial ideas about areas to focus on in deep dive based on her feedback</p></li></ul><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">You shall work with the interviewer to identify and prioritize components in the architecture. It is worth stressing that every interview is different. Sometimes, the interviewer may give off hints that she likes focusing on high-level design. Sometimes, for a senior candidate interview, the discussion could be on the system performance characteristics, likely focusing on the bottlenecks and resource estimations. In most cases, the interviewer may want you to dig into details of some system components. For URL shortener, it is interesting to dive into the hash function design that converts a long URL to a short one. For a chat system, how to reduce latency and how to support online/offline status are two interesting topics.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Time management is essential as it is easy to get carried away with minute details that do not demonstrate your abilities. You must be armed with signals to show your interviewer. Try not</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">to get into unnecessary details. For example, talking about the EdgeRank algorithm of Facebook feed ranking in detail is not ideal during a system design interview as this takes much precious time and does not prove your ability in designing a scalable system.</p><h3 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Example</h3><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">At this point, we have discussed the high-level design for a news feed system, and the interviewer is happy with your proposal. Next, we will investigate two of the most important use cases:</p><ol id="l17"><li data-list-text="1."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">Feed publishing</p></li><li data-list-text="2."><p style="padding-top: 3pt;padding-left: 30pt;text-indent: -12pt;text-align: left;">News feed retrieval</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Figure 3-3 and Figure 3-4 show the detailed design for the two use cases, which will be explained in detail in Chapter 11.</p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><span><img width="603" height="708" alt="image" src="Alex%20Xu%201-3_files/Image_033.jpg"/></span></p><p style="padding-left: 33pt;text-indent: 0pt;text-align: left;"><span><img width="525" height="553" alt="image" src="Alex%20Xu%201-3_files/Image_034.jpg"/></span></p><h2 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Step 4 - Wrap up</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">In this final step, the interviewer might ask you a few follow-up questions or give you the freedom to discuss other additional points. Here are a few directions to follow:</p><ul id="l18"><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">The interviewer might want you to identify the system bottlenecks and discuss potential improvements. Never say your design is perfect and nothing can be improved. There is always something to improve upon. This is a great opportunity to show your critical thinking and leave a good final impression.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">It could be useful to give the interviewer a recap of your design. This is particularly important if you suggested a few solutions. Refreshing your interviewer’s memory can be helpful after a long session.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Error cases (server failure, network loss, etc.) are interesting to talk about.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Operation issues are worth mentioning. How do you monitor metrics and error logs? How to roll out the system?</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">How to handle the next scale curve is also an interesting topic. For example, if your current design supports 1 million users, what changes do you need to make to support 10 million users?</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Propose other refinements you need if you had more time.</p><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">To wrap up, we summarize a list of the Dos and Don’ts.</p><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Dos</h3></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Always ask for clarification. Do not assume your assumption is correct.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Understand the requirements of the problem.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">There is neither the right answer nor the best answer. A solution designed to solve the problems of a young startup is different from that of an established company with millions of users. Make sure you understand the requirements.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Let the interviewer know what you are thinking. Communicate with your interview.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Suggest multiple approaches if possible.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Once you agree with your interviewer on the blueprint, go into details on each component. Design the most critical components first.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Bounce ideas off the interviewer. A good interviewer works with you as a teammate.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Never give up.</p><h3 style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Don’ts</h3></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Don&#39;t be unprepared for typical interview questions.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Don’t jump into a solution without clarifying the requirements and assumptions.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Don’t go into too much detail on a single component in the beginning. Give the high- level design first then drills down.</p></li><li data-list-text="•"><p style="padding-top: 2pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">If you get stuck, don&#39;t hesitate to ask for hints.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 26pt;text-indent: -7pt;text-align: left;">Again, communicate. Don&#39;t think in silence.</p></li><li data-list-text="•"><p style="padding-top: 3pt;padding-left: 18pt;text-indent: 0pt;text-align: left;">Don’t think your interview is done once you give the design. You are not done until your interviewer says you are done. Ask for feedback early and often.</p></li></ul></li></ol></li></ol><h2 style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Time allocation on each step</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">System design interview questions are usually very broad, and 45 minutes or an hour is not enough to cover the entire design. Time management is essential. How much time should you spend on each step? The following is a very rough guide on distributing your time in a 45- minute interview session. Please remember this is a rough estimate, and the actual time distribution depends on the scope of the problem and the requirements from the interviewer.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;">Step 1 Understand the problem and establish design scope: 3 - 10 minutes Step 2 Propose high-level design and get buy-in: 10 - 15 minutes</p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;">Step 3 Design deep dive: 10 - 25 minutes</p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Step 4 Wrap: 3 - 5 minutes</p><h1 style="padding-top: 3pt;padding-left: 59pt;text-indent: 0pt;text-align: center;"><a name="bookmark3">CHAPTER 16: THE LEARNING CONTINUES</a></h1><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Designing good systems requires years of accumulation of knowledge. One shortcut is to dive into real-world system architectures. Below is a collection of helpful reading materials. We highly recommend you pay attention to both the shared principles and the underlying technologies. Researching each technology and understanding what problems it solves is a great way to strengthen your knowledge base and refine the design process.</p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Real-world systems</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">The following materials can help you understand general design ideas of real system architectures behind different companies.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/FCNrbm" class="s4" target="_blank">Facebook Timeline: Brought To You By The Power Of Denormalization: </a><a href="https://goo.gl/FCNrbm" target="_blank">https://goo.gl/FCNrbm</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/NGTdCs" class="s4" target="_blank">Scale at Facebook: </a><a href="https://goo.gl/NGTdCs" target="_blank">https://goo.gl/NGTdCs</a></p><p class="s5" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 148%;text-align: left;"><a href="https://goo.gl/8p5wDV" class="s4" target="_blank">Building Timeline: Scaling up to hold your life story: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/8p5wDV</span> <a href="https://goo.gl/zSLHrj" class="s4" target="_blank">Erlang at Facebook (Facebook chat): </a><a href="https://goo.gl/zSLHrj" target="_blank">https://goo.gl/zSLHrj</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a href="https://goo.gl/qzSiWC" class="s4" target="_blank">Facebook Chat: </a><a href="https://goo.gl/qzSiWC" target="_blank">https://goo.gl/qzSiWC</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/edj4FL" class="s4" target="_blank">Finding a needle in Haystack: Facebook’s photo storage: </a><a href="https://goo.gl/edj4FL" target="_blank">https://goo.gl/edj4FL</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/adFVMQ" class="s4" target="_blank">Serving Facebook Multifeed: Efficiency, performance gains through redesign: </a><a href="https://goo.gl/adFVMQ" target="_blank">https://goo.gl/adFVMQ</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/rZiAhX" class="s4" target="_blank">Scaling Memcache at Facebook: </a><a href="https://goo.gl/rZiAhX" target="_blank">https://goo.gl/rZiAhX</a></p><p class="s5" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/Tk1DyH" class="s4" target="_blank">TAO: Facebook’s Distributed Data Store for the Social Graph: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/Tk1DyH</span> <a href="https://goo.gl/k4feoW" class="s4" target="_blank">Amazon Architecture: </a><a href="https://goo.gl/k4feoW" target="_blank">https://goo.gl/k4feoW</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/C7zxDL" class="s4" target="_blank">Dynamo: Amazon’s Highly Available Key-value Store: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/C7zxDL</span> <a href="https://goo.gl/rYSDTz" class="s4" target="_blank">A 360 Degree View Of The Entire Netflix Stack: </a><a href="https://goo.gl/rYSDTz" target="_blank">https://goo.gl/rYSDTz</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/agbA4K" class="s4" target="_blank">It’s All A/Bout Testing: The Netflix Experimentation Platform: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/agbA4K</span> <a href="https://goo.gl/A4FkYi" class="s4" target="_blank">Netflix Recommendations: Beyond the 5 stars (Part 1): </a><a href="https://goo.gl/A4FkYi" target="_blank">https://goo.gl/A4FkYi</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/XNPMXm" class="s4" target="_blank">Netflix Recommendations: Beyond the 5 stars (Part 2): </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/XNPMXm</span> <a href="https://goo.gl/dvkDiY" class="s4" target="_blank">Google Architecture: </a><a href="https://goo.gl/dvkDiY" target="_blank">https://goo.gl/dvkDiY</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/xj5n9R" class="s4" target="_blank">The Google File System (Google Docs): </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/xj5n9R</span> <a href="https://goo.gl/9zqG7x" class="s4" target="_blank">Differential Synchronization (Google Docs): </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/9zqG7x</span> <a href="https://goo.gl/mCPRUF" class="s4" target="_blank">YouTube Architecture: </a><a href="https://goo.gl/mCPRUF" target="_blank">https://goo.gl/mCPRUF</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 148%;text-align: left;"><a href="https://goo.gl/dH3zYq" class="s4" target="_blank">Seattle Conference on Scalability: YouTube Scalability: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/dH3zYq</span> <a href="https://goo.gl/6NaZca" class="s4" target="_blank">Bigtable: A Distributed Storage System for Structured Data: </a><a href="https://goo.gl/6NaZca" target="_blank">https://goo.gl/6NaZca</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/s1VcW5" class="s4" target="_blank">Instagram Architecture: 14 Million Users, Terabytes Of Photos, 100s Of Instances, Dozens Of Technologies: </a><a href="https://goo.gl/s1VcW5" target="_blank">https://goo.gl/s1VcW5</a></p><p class="s5" style="padding-top: 4pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/EwvfRd" class="s4" target="_blank">The Architecture Twitter Uses To Deal With 150M Active Users: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/EwvfRd</span> <a href="https://goo.gl/nYGC1k" class="s4" target="_blank">Scaling Twitter: Making Twitter 10000 Percent Faster: </a><a href="https://goo.gl/nYGC1k" target="_blank">https://goo.gl/nYGC1k</a></p><p style="padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/GzVWYm" class="s4" target="_blank">Announcing Snowflake (Snowflake is a network service for generating unique ID numbers at high scale with some simple guarantees): </a><a href="https://goo.gl/GzVWYm" target="_blank">https://goo.gl/GzVWYm</a></p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://goo.gl/8KbqTy" class="s4" target="_blank">Timelines at Scale: </a><a href="https://goo.gl/8KbqTy" target="_blank">https://goo.gl/8KbqTy</a></p><p class="s5" style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/kGZuVy" class="s4" target="_blank">How Uber Scales Their Real-Time Market Platform: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/kGZuVy</span> <a href="https://goo.gl/KtmjW3" class="s4" target="_blank">Scaling Pinterest: </a><a href="https://goo.gl/KtmjW3" target="_blank">https://goo.gl/KtmjW3</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="https://goo.gl/w6rRsf" class="s4" target="_blank">Pinterest Architecture Update: </a><a href="https://goo.gl/w6rRsf" target="_blank">https://goo.gl/w6rRsf</a></p><p class="s5" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://goo.gl/8A1Pi8" class="s4" target="_blank">A Brief History of Scaling LinkedIn: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://goo.gl/8A1Pi8</span> <a href="https://goo.gl/dWtgYa" class="s4" target="_blank">Flickr Architecture: </a><a href="https://goo.gl/dWtgYa" target="_blank">https://goo.gl/dWtgYa</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 14pt;text-align: left;"><a href="https://goo.gl/NjBDtC" class="s4" target="_blank">How We&#39;ve Scaled Dropbox: </a><a href="https://goo.gl/NjBDtC" target="_blank">https://goo.gl/NjBDtC</a></p><p style="padding-top: 6pt;padding-left: 5pt;text-indent: 0pt;text-align: left;"><a href="https://bit.ly/2AHJnFn" class="s4" target="_blank">The WhatsApp Architecture Facebook Bought For $19 Billion: </a><a href="https://bit.ly/2AHJnFn" target="_blank">https://bit.ly/2AHJnFn</a></p><h2 style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">Company engineering blogs</h2><p style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;text-align: left;">If you are going to interview with a company, it is a great idea to read their engineering blogs and get familiar with technologies and systems adopted and implemented there. Besides, engineering blogs provide invaluable insights about certain fields. Reading them regularly could help us become better engineers.</p><p style="padding-top: 5pt;padding-left: 5pt;text-indent: 0pt;line-height: 144%;text-align: left;"><a href="https://medium.com/airbnb-engineering" class="s4" target="_blank">Here is a list of engineering blogs of well-known large companies and startups. Airbnb: </a><a href="https://medium.com/airbnb-engineering" target="_blank">https://medium.com/airbnb-engineering</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 11pt;text-align: left;"><a href="https://developer.amazon.com/blogs" class="s4" target="_blank">Amazon: </a><a href="https://developer.amazon.com/blogs" target="_blank">https://developer.amazon.com/blogs</a></p><p class="s5" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 125%;text-align: left;"><a href="https://blog.asana.com/category/eng" class="s4" target="_blank">Asana: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://blog.asana.com/category/eng</span> <a href="https://developer.atlassian.com/blog" class="s4" target="_blank">Atlassian: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://developer.atlassian.com/blog</span> <a href="http://engineering.bittorrent.com/" class="s4" target="_blank">Bittorrent: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">http://engineering.bittorrent.com</span> <a href="https://blog.cloudera.com/" class="s4" target="_blank">Cloudera: </a><a href="https://blog.cloudera.com/" target="_blank">https://blog.cloudera.com</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 124%;text-align: left;"><a href="https://blog.docker.com/" class="s4" target="_blank">Docker: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://blog.docker.com</span> <a href="https://blogs.dropbox.com/tech" class="s4" target="_blank">Dropbox: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://blogs.dropbox.com/tech</span> <a href="http://www.ebaytechblog.com/" class="s4" target="_blank">eBay: </a><a href="http://www.ebaytechblog.com/" target="_blank">http://www.ebaytechblog.com</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 125%;text-align: left;"><a href="https://code.facebook.com/posts" class="s4" target="_blank">Facebook: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://code.facebook.com/posts</span> <a href="https://githubengineering.com/" class="s4" target="_blank">GitHub: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://githubengineering.com</span> <a href="https://developers.googleblog.com/" class="s4" target="_blank">Google: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://developers.googleblog.com</span> <a href="https://engineering.groupon.com/" class="s4" target="_blank">Groupon: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://engineering.groupon.com</span> <a href="http://highscalability.com/" class="s4" target="_blank">Highscalability: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">http://highscalability.com</span> <a href="https://tech.instacart.com/" class="s4" target="_blank">Instacart: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://tech.instacart.com</span> <a href="https://engineering.instagram.com/" class="s4" target="_blank">Instagram: </a><a href="https://engineering.instagram.com/" target="_blank">https://engineering.instagram.com</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://engineering.linkedin.com/blog" class="s4" target="_blank">Linkedin: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://engineering.linkedin.com/blog</span> <a href="https://mixpanel.com/blog" class="s4" target="_blank">Mixpanel: </a><a href="https://mixpanel.com/blog" target="_blank">https://mixpanel.com/blog</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 124%;text-align: left;"><a href="https://medium.com/netflix-techblog" class="s4" target="_blank">Netflix: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://medium.com/netflix-techblog</span> <a href="https://engblog.nextdoor.com/" class="s4" target="_blank">Nextdoor: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://engblog.nextdoor.com</span> <a href="https://www.paypal-engineering.com/" class="s4" target="_blank">PayPal: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://www.paypal-engineering.com</span> <a href="https://engineering.pinterest.com/" class="s4" target="_blank">Pinterest: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://engineering.pinterest.com</span> <a href="https://engineering.quora.com/" class="s4" target="_blank">Quora: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://engineering.quora.com</span> <a href="https://redditblog.com/" class="s4" target="_blank">Reddit: </a><a href="https://redditblog.com/" target="_blank">https://redditblog.com</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://developer.salesforce.com/blogs/engineering" class="s4" target="_blank">Salesforce: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://developer.salesforce.com/blogs/engineering</span> <a href="https://engineering.shopify.com/" class="s4" target="_blank">Shopify: </a><a href="https://engineering.shopify.com/" target="_blank">https://engineering.shopify.com</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a href="https://slack.engineering/" class="s4" target="_blank">Slack: </a><a href="https://slack.engineering/" target="_blank">https://slack.engineering</a></p><p class="s5" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://developers.soundcloud.com/blog" class="s4" target="_blank">Soundcloud: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://developers.soundcloud.com/blog</span> <a href="https://labs.spotify.com/" class="s4" target="_blank">Spotify: </a><a href="https://labs.spotify.com/" target="_blank">https://labs.spotify.com</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a href="https://stripe.com/blog/engineering" class="s4" target="_blank">Stripe: </a><a href="https://stripe.com/blog/engineering" target="_blank">https://stripe.com/blog/engineering</a></p><p class="s5" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 122%;text-align: left;"><a href="https://github.com/donnemartin/system-design-primer" class="s4" target="_blank">System design primer: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://github.com/donnemartin/system-design-primer</span> <a href="https://blog.twitter.com/engineering/en_us.html" class="s4" target="_blank">Twitter: </a><a href="https://blog.twitter.com/engineering/en_us.html" target="_blank">https://blog.twitter.com/engineering/en_us.html</a></p><p class="s5" style="padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://www.thumbtack.com/engineering" class="s4" target="_blank">Thumbtack: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://www.thumbtack.com/engineering</span> <a href="http://eng.uber.com/" class="s4" target="_blank">Uber: </a><a href="http://eng.uber.com/" target="_blank">http://eng.uber.com</a></p><p class="s5" style="padding-top: 3pt;padding-left: 5pt;text-indent: 0pt;line-height: 126%;text-align: left;"><a href="https://yahooeng.tumblr.com/" class="s4" target="_blank">Yahoo: </a><span style=" color: #00F; font-family:&quot;Times New Roman&quot;, serif; font-style: normal; font-weight: normal; text-decoration: underline; font-size: 12pt;">https://yahooeng.tumblr.com</span> <a href="https://engineeringblog.yelp.com/" class="s4" target="_blank">Yelp: </a><a href="https://engineeringblog.yelp.com/" target="_blank">https://engineeringblog.yelp.com</a></p><p style="padding-left: 5pt;text-indent: 0pt;line-height: 13pt;text-align: left;"><a href="https://medium.com/zoom-developer-blog" class="s4" target="_blank">Zoom: </a><a href="https://medium.com/zoom-developer-blog" target="_blank">https://medium.com/zoom-developer-blog</a></p></body></html>
